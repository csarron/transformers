#!/usr/bin/env python3
# -*- coding: utf-8 -*-
__author__ = "Qingqing Cao, https://awk.ai/, Twitter@sysnlp"

import argparse
import numpy as np

from pathlib import Path


def gen_one_energy(energy_file):
    for line in open(energy_file):
        yield line


def main(args):
    time_log_path = Path(args.log_dir)
    energy_log = args.energy_log
    iterations = args.iterations
    start_times = [time_log_path.joinpath(f"t{i}-start.txt").read_text().strip()
                   for i in range(1, iterations + 1)]
    end_times = [time_log_path.joinpath(f"t{i}-end.txt").read_text().strip()
                 for i in range(1, iterations + 1)]

    energy = []
    latency = []
    # energy_list = []
    energy_gen = gen_one_energy(energy_log)
    last_line = None
    for i, (start, end) in enumerate(zip(start_times, end_times)):
        power_values = []
        start_record = False
        print(f"iter{i + 1}", start, end)
        while True:
            try:
                if last_line is not None:
                    line = last_line
                    last_line = None
                else:
                    line = next(energy_gen)
                items = line.split()
                timestamp = items[0]
                power = float(items[2])
                if timestamp == start:
                    start_record = True
                if timestamp == end:
                    last_line = line
                    print(start, end, power_values)
                    print()
                    break
                if start_record:
                    power_values.append(power)
            except StopIteration:
                print(f"iter {start} {end}, finished reading {energy_log}")
                break
        energy.append(sum(power_values) / 3.6e6)
        latency.append(len(power_values))
        # energy_list.append(power_values)
    print(f"found {len(energy)} logs")
    avg = np.mean(energy)
    std = np.std(energy)
    print(f"{time_log_path} energy")
    print(f"avg (kwh), std (kwh), avg (J), std (J), std ratio (%)")
    print(f"{avg:.5f}, {std:.5f}, {avg * 3.6e6:.1f}, "
          f"{std * 3.6e6:.1f}, {std * 100 / avg:.1f}")
    print(f"{time_log_path} latency")
    latency_avg = np.mean(latency)
    latency_std = np.std(latency)
    print(f"avg (s), std (s), std ratio (%)")
    print(f"{latency_avg:.1f}, {latency_std:.1f}, {avg * 3.6e6:.1f},"
          f"{latency_std * 100 / latency_avg:.1f}")
    if args.num_examples:
        per_ex_avg = avg / args.num_examples * args.batch_size
        per_ex_std = std / args.num_examples * args.batch_size
        print(f"{time_log_path} per batch ({args.batch_size}) energy")
        print(f"avg (J), std (J), std ratio (%)")
        print(f"{per_ex_avg * 3.6e6:.1f}, {per_ex_std * 3.6e6:.1f}, "
              f"{per_ex_std * 100 / per_ex_avg:.1f}")
        per_t_ex_avg = latency_avg / args.num_examples * args.batch_size
        per_t_ex_std = latency_std / args.num_examples * args.batch_size
        print(f"{time_log_path} per batch ({args.batch_size}) latency")
        print(f"avg (s), std (s), std ratio (%)")
        print(f"{per_t_ex_avg:.3f}, {per_t_ex_std:.3f}, "
              f"{per_t_ex_std * 100 / per_t_ex_avg:.1f}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("energy_log", type=str,
                        help="energy log file generated by wattsup.py")
    parser.add_argument("-d", "--log_dir", type=str,
                        help="log dir containing start and end time data")
    parser.add_argument("-i", "--iterations", default=5, type=int,
                        help="number of iterations in the time data", )
    parser.add_argument("-n", "--num_examples", default=0, type=int,
                        help="number of examples to get "
                             "average energy per example ", )
    parser.add_argument("-b", "--batch_size", default=32, type=int,
                        help="batch size to run examples", )
    main(parser.parse_args())
